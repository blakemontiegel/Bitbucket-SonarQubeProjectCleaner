Setting Up the Build Environment
================================

To develop and deploy the SonarQube Repo Cleaner Plugin, you'll need to set up your build environment. Follow the steps below to install and configure the necessary tools and set up the plugin

1\. Install Atlassian Plugin SDK
--------------------------------

Important Note

The Atlassian Plugin SDK may suggest using Java 8 during installation. However, this plugin is written with **Java 11** in mind. Ensure that you have Java 11 installed and configured as JAVA_HOME to avoid any compatibility issues

The Atlassian Plugin SDK simplifies the build process with specific commands tailored for Atlassian products. Downloading and installing the SDK provides access to these commands, simplifying plugin development and packaging

-   **Windows:**
    -   [Download and install the Atlassian Plugin SDK](https://developer.atlassian.com/server/framework/atlassian-sdk/install-the-atlassian-sdk-on-a-windows-system/) by following the detailed steps provided for Windows systems
-   **Linux or macOS:**
    -   [Download and install the Atlassian Plugin SDK](https://developer.atlassian.com/server/framework/atlassian-sdk/install-the-atlassian-sdk-on-a-linux-or-mac-system/) by following the detailed steps provided for Linux or macOS systems

2\. Alternative setup: Apache Maven and Java
--------------------------------------------

If you prefer not to use the Atlassian Plugin SDK, you can set up your environment manually by installing Apache Maven and Java

-   **Apache Maven:**
    -   Download [Apache Maven 3.5.4](https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/)
    -   Ensure that MAVEN_HOME is set to the installation directory and \bin is set in Path
    -   **Note:** The Atlassian Plugin SDK includes a Maven wrapper (atlas-mvn), which simplifies plugin development
-   **Java 11:**

    -   Download and install [Java 11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html) if you haven't already
    -   Ensure that JAVA_HOME is set to the JDK installation directory and \bin is set in Path

3\. Building the Plugin
-----------------------

After setting up your build environment, you first need to obtain the project files

-   **Clone the Project:**

    1.  Clone the project repository from [Bitbucket](https://bitbucket.dice.ste-is.com/projects/SDO/repos/bitbucket-sonarqube-plugin/browse)
-   **Using Atlassian Plugin SDK:**
    1.  Open a terminal or command prompt

    2.  Navigate to the directory of where the plugin was cloned

    3.  Configure **config.properties **before running package command
        1.  Setup **HTTP Read Token** for Bitbucket
        2.  Setup **HTTP User Token** for SonarQube
        3.  Ensure the domains are properly configured
            1.  URL should look something like https://domain.com
            2.  omit trailing '/' if included
        4.  Enter branches you don't want to be deleted when a merge occurs in **protectedBranches**
            1.  Typically will be 'master', 'OD-Fixes', and 'main' if named that
    4.  Run the following command to build the plugin:

        1.  `atlas-mvn clean package`

    5.  This command compiles the code, empties the target/ directory, and packages it into a JAR located in the target/ directory

-   **Using Apache Maven:**
    -   If you're using Maven directly, the command is similar:

        -   `mvn clean package`

4\. Installing the Plugin in Bitbucket
--------------------------------------

Once the JAR file is created, you can install it into Bitbucket. (For Bitbucket version 8.9.10 and later uploading plugins is disable by default so we must enable it if it hasn't been already)

-   **Enable Plugin Upload (Can be skipped for versions 8.9.9 and earlier):**
    1.  Open or create the `bitbucket.properties` file located in the servers file system at `/var/atlassian/application-data/bitbucket/shared/`
    2.  Add the following line to the file: **`upm.plugin.upload.enabled=true`**
    3.  Save the file (a restart of the Bitbucket instance may be required for the changes to take effect)
-   **Upload the JAR file:**
    1.  Navigate to **Administration > Manage apps**
    2.  Click on **Upload app**
    3.  Drag and drop the JAR file from the `target/` directory into the upload area and click **Upload**

5\. Configuring Logging
-----------------------

To ensure that the plugin logs its activities properly, you need to enable debug logging in Bitbucket

-   **Enable Debug Logging:**
    1.  Navigate to **Administration > Logging and profiling**
    2.  Click **Enable debug logging**
-   **Access Logs:**
    -   Logs can be found in `atlassian-bitbucket.log` file located at `/var/atlassian/application-data/bitbucket/shared/log`

6\. Enable Plugin
-----------------

The plugin will be disable by default on the first install

-   **Enable Plugin**

    1.  Navigate to desired repo
    2.  **Settings > Hooks > **under **Post Receive**
    3.  Enable **Sonarqube Repo Cleaner**
-   This can be done at the Project level too if wanted
